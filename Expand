#!/usr/bin/python
import sys, os, re
ncmd = 1

def check_replace(dollar_str):
    """
    Given "$...", error-check and possibly expand the
    immediate candidate macro. Return the processed
    string, or 0 if error.
    """
    
    # Default expansion (NAME not defined)
    processed = ""

    if len(dollar_str) <= 1:
        return dollar_str
    
    c1 = dollar_str[1:2]

    # $NAME ?
    if c1.isalpha() or c1 == "_":
        # Must match NAME
        name_re = re.search(r"(?<=^\$)(\w+)", dollar_str)
        name    = name_re.group(0)

        if name in os.environ.keys():
            processed = str(os.environ[name])

        rest    = dollar_str[name_re.end():]

    # $D ?
    elif c1.isdigit():
        # Give Dth arg or ""
        d = int(c1)
        if d < len(sys.argv):
            processed = sys.argv[d]
        
        rest = dollar_str[2:]

    # $* ?
    elif c1 == "*":
        processed = ' '.join(argv[1:])
        rest      = dollar_str[2:]

    # ${D} ?
    elif re.search(r"^\${\d}",dollar_str):
        d = int(dollar_str[2])
        if d < len(sys.argv):
            processed = sys.argv[d]
        
        rest = dollar_str[4:]

    # ${... ?
    elif c1 == "{":
        # Match NAME
        name_re = re.search(r"(?<=^\${)[_a-zA-Z]+\w*",dollar_str)
        
        if (name_re is None) or \
              (name_re.end() == len(dollar_str)) or \
              (dollar_str[name_re.end():name_re.end()+1] not in ["}","-","="]):
            return 0

        # Must be ${NAME[}\-=]+...
        name   = name_re.group(0)
        next_c = dollar_str[name_re.end():name_re.end()+1]

        if name in os.environ.keys():
            processed = os.environ[name]
        # ${NAME} ?
        if next_c == "}":
            rest = dollar_str[name_re.end()+1:]

        # ${NAME-... or ${NAME=... ?
        elif next_c == "-" or next_c == "=":

            # Match non-empty WORD
            word_re = re.search(r"(?<=^\${)(\w+(=|-))((.*?)[^\\](\\\\)*)(?=})", dollar_str)
            if not word_re:
                # Try empty WORD
                word_re = re.search(r"(?<=^\${)(\w+(=|-))((.*?)(\\\\)*)(?=})", dollar_str)
            if not word_re:
                # No closing brace
                return 0
            
            word = word_re.group(3)
            sep  = word_re.group(2)
            
            rest = dollar_str[word_re.end()+1:]

            # Done if NAME defined
            if name in os.environ.keys():
                pass 

            # NAME not defined
            else:
                # Recursively expand WORD first
                processed = expand(word)
                if sep == "=":
                    os.environ[name] = processed
                
        # Otherwise error
        else:
            return 0

    # Otherwise just another char
    else:
        processed = dollar_str[0]
        rest = dollar_str[1:]

    return str(processed) + expand(rest)

def expand(old_line):
    """ 
    Return expanded line or 0 on error.
    """

    # Match up to first '$'
    up_to_first_dollar_re = re.search(r"(^|[^\$]+?)\$",old_line)

    if up_to_first_dollar_re is None:
        return old_line

    stuff_dollar = up_to_first_dollar_re.group(0)
    even_bs_re = re.search(r"(^|[^\\]+?)(\\\\)*\$",stuff_dollar)

    # First $ escaped; try next one
    if even_bs_re is None:
        return stuff_dollar + expand(old_line[len(stuff_dollar):])

    # Unescaped $
    else:
        prefix = old_line[:len(stuff_dollar)-1] 
        suffix = check_replace(old_line[len(stuff_dollar)-1:])
        if suffix == 0:
            return 0
        else:
            return prefix + suffix


while True:
    
    try:
        line = raw_input("("+str(ncmd)+")$ ")
    except (EOFError):
        print ""
        break
    if line == "":
        continue
    expanded = expand(line)
    if expanded == 0:
        sys.stderr.write("invalid expansion\n")
        continue
    print ">> " + expanded
    ncmd += 1

